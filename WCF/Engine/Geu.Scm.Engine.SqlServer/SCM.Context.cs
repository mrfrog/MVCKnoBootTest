//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geu.Scm.Engine.SqlServer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Scm_Entities : DbContext
    {
        public Scm_Entities()
            : base("name=Scm_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<PurchaseOrderSelect_Result> PurchaseOrderSelect(Nullable<int> currentUserId, string companyId, string languageId, Nullable<System.DateTime> issueDateFrom, Nullable<System.DateTime> issueDateTo, Nullable<int> orderStatusId)
        {
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var issueDateFromParameter = issueDateFrom.HasValue ?
                new ObjectParameter("IssueDateFrom", issueDateFrom) :
                new ObjectParameter("IssueDateFrom", typeof(System.DateTime));
    
            var issueDateToParameter = issueDateTo.HasValue ?
                new ObjectParameter("IssueDateTo", issueDateTo) :
                new ObjectParameter("IssueDateTo", typeof(System.DateTime));
    
            var orderStatusIdParameter = orderStatusId.HasValue ?
                new ObjectParameter("OrderStatusId", orderStatusId) :
                new ObjectParameter("OrderStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseOrderSelect_Result>("PurchaseOrderSelect", currentUserIdParameter, companyIdParameter, languageIdParameter, issueDateFromParameter, issueDateToParameter, orderStatusIdParameter);
        }
    
        public virtual ObjectResult<LineSelect_Result> LineSelect(Nullable<int> currentUserId, string companyId, string languageId)
        {
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LineSelect_Result>("LineSelect", currentUserIdParameter, companyIdParameter, languageIdParameter);
        }
    }
}
